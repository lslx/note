
--------------------- 加固强度分析。
CCBClient_B_V4.0.3.001_e4.00_VC213_201704111308-nocheck_signed_1504229788.8_sec.apk
md5: 9a0e109703816b7347776519f63ebec5
1. 防调部分
  防调采用多进程架构，主程序被子进程调试保护，并加入进程通信防止拆解。 此架构有较强的反调效果，但因为实现的问题，破除方法如下：
  a. 从实现看，进程防调仅有一处开关，即Jni_Onload 尾部的函数调用，只要断点返回，或者内存nop掉，即可破除进程调试和进程通信。虽然libDexHelper代码已在编译时压扁控制流，
    并混淆了函数名称，但定位此函数仍然是手工可完成的，并且时间是可接受的。建议增加多处调用点，防止单个入口，并且增加隐蔽代码在其他线程，检测防调代码是否正常运行。
  b. 直接使用内核调试器，或者jtag硬件调试器，或者软件仿真器。(高门槛)
  对比其他厂家：
  爱加密，360，均未使用多进程保护架构，其中爱加密采用了简单的检查status防调方式，采用定制内核修改T标志，即可破除。 360采用了检查status，以及时间检查等手段，修改T标志
  并不能破除，需要拦截clock_gettime, gettimeofday等函数返回伪造值。bangcle，爱加密，360 等在敏感函数上都使用了swi直接进内核的方法，以防止敏感函数被断点。

  综上防调方面架构是相对强的，但实现仍有弱点，改进还有空间。改进点如下：
  a.  防调功能入口，需多个入口，增加防调监视线程。此改进防止单个点破除整个防调。
  b.  增加时间检查机制的防调。此方式对应用层，内核层，硬件层jtag，所有调试器广泛适用，并且破解需定制内核时间函数。

2. dex加固部分
   此包包含多dex，整体加固，函数抽取，以及vmp。
   整体加固部分各个厂商均有实现，是加固最基础的部分，但如果单独使用整体加固，则强度很弱，容易破解。
   有效的隐藏原始dex数目和结构，多dex的加载和管理实现在so中，并经过源码级混淆。（此点强于爱加密，其多dex管理部分是暴露的）
   函数抽取部分仅在动态运行时修复，可以避免整体被dump，但不能防止基于libdvm或libart修改版的dump工具。
   vmp部分，so实现vm并经过源码级混淆处理，目前不可破解，因为基于libdvm或libart修改版在原理上已经不适用，其opcode已被修改，且不在系统vm上运行。

   综上多dex加固同时开启了整体加固，函数抽取，vmp，直接结果导致此dex不可被修复并dump。


3. so加固部分
   样本包so加固仅针对libSafeUtils.so，其余未加固。
   ida打开libSafeUtils.so，则仅见%l，静态暴露信息极少，在原理上利用了ida本身解析so的弱点，阿里也使用的同样的手法。
   优缺点如下
   优点：a. 静态暴露信息少，虽然修复简单，但如果不了解原理的，定位起来困难较大。
        b. 此静态加固方法实现简单。
   不足：
        A. 此静态防分析方法依赖于已发布版本ida自身弱点，在新版本中极有可能因修复而失效。
        B. 在010editor下，仍然可查基本的数据结构，符号等。
        C. 在没有较强的动态防调特性时，破解者可忽略此问题。

   其他：在原始so运行之前壳先运行，避免在启动初始阶段原始被dump。


4. 完整性部分
   完整性包含了签名保护，用以防止二次打包。但如果壳的完整性遭到破坏，则签名保护失去意义。
   完整性保护应被混淆，防调等手段保护起来，防止被解读，绕过。
   在实现上，完整性保护应存在于多处，防止单点攻破即破解。
   实现上，避免使用libc函数，使用swi直接进入内核以防止被断点或者hook。此点实现目前使用libc，需改进。
   由于完整性的代码所在so都被混淆过，所以定位很难。
   
   注：完整性依赖于破解目标场景。当破解目标是运行于特定手机时，完整性是脆弱的，几乎不可能保护的。理由如下：
   破解者可刷写内核，写内核模块从而从定向完整性验证的文件，破解者可控制环境变量控制第一个加载的so并替换需要做完整性校验的文件。
   但此时破解者不能以此法大规模打包发布破解文件。

   综上，完整性，有细节需改进。但由于有防调，混淆，等机制存在，所以此问题不严重。


综上，以上仅针对关键部分，而忽略了诸如防注入，数据加密，资源加密等，理由如下：
一旦，防调，dex加固，被攻破，则防注入，数据加密，资源加密等破解变得简单，且很多时候并不需要破解，且本样本包未进行资源和数据加密。

结论： 此包整体强度为强，但有某些弱点，详见上文。
------------------------------------
爱加密 反调分析
竞品分析包/01.爱加密/2017.03.15/BeiJingMB_signed.apk
md5: e6390453b163f98233f074be446d8a9e

strace 自动跟踪时，程序最终检测 自身status而退出。
当ida单步跟踪时，最终在一个循环后遇到非法指令。

so 加载顺序
 libexec.so
 libexecmain.so
 libijmDataEncryption.so  

 ida静态分析打开以上so 均连续报错，so脱壳工具可用顺利脱壳，（但工具有崩溃，经查工具崩溃对结果无影响）
 脱壳后可ida正常打开分析，不报错。

ida调试时特征：
1. 在so的init段，解密操作数据段与got表等项，解密结果与内存断点有相关性。
2. init段中代码系统调用mmap2,munmap,cachflash,等函数调用均适用svc 指令，直接进入内核。

整体上，基于dexhunter定制rom 可脱壳，根据脱壳结果，可判断策略 （vmp 除外）

策略判断：
1. 有dex外层包装的dex， 则判断有至少有v1，结果有。
2. 有app代码dex，且很多内部函数体为空，则至少有v2， 结果有。
3. vmp不好判断，需在app的dex中的jni函数中寻找，需判断其为自定义dalvik，而app同时有v2时，函数体是不可见的（脱壳结果不可见），
   从其网站宣称已有双重vmp，以及王洋的分析结果看，必有。（但直接调试还未触及）
加固策略：v1 + v2 + v4


策略v2细节：
1. 插入假类，插入假函数，函数体抽取，增加或替换构造函数。    将原属于a的函数，混入b类，
2. 插入包代码，用于反模拟器（tiantianvm）

增加
3. 修改debug_info 偏移超出文件
4. 修改annotations 信息，
com.shell 增加 多dex支持代码

基于最新包更新如下：（广州银行_2.0.3_203.apk, 拿到包时间2017.08.03）
爱加密多进程防调，根据最新包验证，并不支持多进程防调




am broadcast -a com.zjdroid.invoke --ei target 5675 --es cmd '{"action":"dump_dexinfo"}'
am broadcast -a com.zjdroid.invoke --ei target 5675 --es cmd '{"action":"backsmali","dexpath":"/data/data/com.yimq.testactivity/.cache/classes.jar","mCookie":"-1"}'
am broadcast -a com.zjdroid.invoke --ei target 5675 --es cmd '{"action":"backsmali","dexpath":"/data/app/com.yimq.testactivity-1.apk","mCookie":"-1"}'